type Summary @entity {
    id: ID!
    totalUsers: Int!
    totalPools: Int!
    totalStakers: Int!
    totalNodes: Int!
    totalStaked: BigInt!
    totalBlocks: Int!
    totalReward: BigInt!
    totalProtocols: Int!
    totalChains: Int!
}

type User @entity {
    id: ID!
    stakedBalance: BigInt!
    maturingBalance: BigInt!
    maturingTimestamp: BigInt!
    releasingBalance: BigInt!
    releasingTimestamp: BigInt!
    balance: BigInt!
    totalBlocks: Int!
    totalReward: BigInt!
    pool: StakingPool
}

type StakingPool @entity {
    id: ID!
    user: User!
    manager: ID!
    protocol: Protocol
    paused: Boolean!
    shares: BigInt!
    amount: BigInt!
    fee: StakingPoolFee!
    totalUsers: Int!
    totalCommission: BigInt!
    commissionPercentage: BigDecimal
    timestamp: BigInt!
    monthlyPerformance: [MonthlyPoolPerformance!]! @derivedFrom(field: "pool")
    weeklyPerformance: [WeeklyPoolPerformance!]! @derivedFrom(field: "pool")
}

type StakingPoolFee @entity {
    id: ID!
    pool: StakingPool!
    commission: Int
    gas: Int
    created: BigInt!
    lastUpdated: BigInt!
}

enum StakingPoolFeeType {
    GAS_TAX_COMMISSION
    FLAT_RATE_COMMISSION
}

type StakingPoolFeeHistory @entity {
    id: ID!
    pool: StakingPool!
    newValue: Int!
    change: Int!
    timestamp: BigInt!
    feeType: StakingPoolFeeType
}

type PoolUser @entity {
    id: ID!
}

type Stake @entity {
    id: ID!
    user: User!
    value: BigInt!
    timestamp: BigInt!
}

type Unstake @entity {
    id: ID!
    user: User!
    value: BigInt!
    timestamp: BigInt!
}

type Withdraw @entity {
    id: ID!
    user: User!
    value: BigInt!
    timestamp: BigInt!
}

enum ActivityType {
    DEPOSIT
    STAKE
    UNSTAKE
    WITHDRAW
}

type PoolActivity @entity {
    id: ID!
    pool: StakingPool!
    user: PoolUser!
    amount: BigInt!
    shares: BigInt
    timestamp: BigInt!
    type: ActivityType!
}

type PoolBalance @entity {
    id: ID!
    pool: StakingPool!
    user: PoolUser
    shares: BigInt!
    balance: BigInt!
    stakeTimestamp: BigInt!
}

enum StakingPoolUserHistoryAction {
    JOIN
    LEAVE
}

type StakingPoolUserHistory @entity {
    id: ID!
    timestamp: BigInt!
    pool: StakingPool!
    user: PoolUser!
    totalUsers: Int!
    action: StakingPoolUserHistoryAction!
}

type PoolShareValue @entity {
    id: ID!
    pool: StakingPool!
    timestamp: BigInt!
    value: BigDecimal!
}

type Node @entity {
    id: ID!
    owner: User
    timestamp: BigInt!
    retirementTimestamp: BigInt
    status: String
    totalBlocks: Int!
    totalReward: BigInt!
}

type Protocol @entity {
    id: ID!
    version: Int!
    address: ID!
    timestamp: BigInt!
    totalChains: Int!
}

type Chain @entity {
    id: ID!
    protocol: Protocol!
    number: Int!
    totalBlocks: Int!
    totalReward: BigInt!
    start: BigInt!
    targetInterval: Int
}

type Block @entity {
    id: ID!
    chain: Chain
    number: Int
    timestamp: BigInt!
    producer: User
    node: Node
    reward: BigInt
    commission: BigInt
    difficulty: BigInt
    gasPrice: BigInt!
    gasLimit: BigInt!
}

type BlockSelectorContext @entity {
    id: ID!
    index: Int!
    # params added when processing NewChain event
    minDifficulty: BigInt!
    targetInterval: BigInt!
    difficultyAdjustmentParameter: BigInt!
    # params updated at every produceBlock
    ethBlockCheckpoint: BigInt! # not the actual goal, many times needs the +1
    difficulty: BigInt! # getDifficulty eth_call
    lastBlockTimestamp: BigInt!
}

type Eligibility @entity {
    id: ID!
    user: User!
    stake: BigInt!
    block: BigInt!
    blockSelector: BlockSelectorContext!
    eligible: Boolean
}

type WeeklyPoolPerformance @entity {
    # The pool address - The week
    id: ID!
    # Unix Week (Timestamp / 604800)
    timestamp: BigInt!
    # Staking Pool
    pool: StakingPool!
    # stakingPool.amount / stakingPool.shares
    shareValue: BigDecimal!
    # Weekly Performance pool shareValue - previous weekly shareValue
    performance: BigDecimal!
}

type MonthlyPoolPerformance @entity {
    # The pool address - The month
    id: ID!
    # Unix Month (Timestamp / 2628000)
    timestamp: BigInt!
    # Staking Pool
    pool: StakingPool!
    # stakingPool.amount / stakingPool.shares
    shareValue: BigDecimal!
    # Monthly Performance pool shareValue - previous monthly shareValue
    performance: BigDecimal!
}
